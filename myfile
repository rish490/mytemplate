#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef long double ld;
#define forn(i, n) for (int i = 0; i < (int)(n); i++)
#define forab(i, a, b) for (int i = (int)(a); i < (int)(b); ++i)
# define my_sizeof(type) ((char *)(&type+1)-(char*)(&type))
long long mod=1e9+7;
#define pll pair<ll, ll>
using namespace std;
void pyes(){
    cout<<"YES"<<endl;
}
void pno(){
    cout<<"NO"<<endl;
}

ll lcm(ll num1,ll num2){
      ll lcm, gcd, temp;
       ll a = num1;  
    ll b = num2;     
    // use while loop to define the condition  
    while (num2 != 0)  
    {  
        temp = num2;  
        num2 = num1 % num2;  
        num1 = temp;  
    }  
      
    // assign num1 to gcd variable  
    gcd = num1;  
    lcm = (a * b) / gcd;
    return lcm;    
}
struct custom_hash {
    static uint64_t splitmix64(uint64_t x) {
        x += 0x9e3779b97f4a7c15;
        x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;
        x = (x ^ (x >> 27)) * 0x94d049bb133111eb;
        return x ^ (x >> 31);
    }

    size_t operator()(uint64_t x) const {
        static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();
        return splitmix64(x + FIXED_RANDOM);
    }
};

long long power(long long x, long long y) {
	long long res = 1;
	x = x % mod;
	while (y > 0) {
		if (y & 1)
			res = (res * x) % mod;
		y = y >> 1;
		x = (x * x) % mod;
	}
	return res;
}
long long modInverse(ll x) {
	return power(x, mod - 2);
}
long long modadd(long long a, long long b) {
	return (a % mod + b % mod + 2 * mod) % mod;
}
long long modmult(long long a, long long b) {
	return (a % mod * b % mod) % mod;
}
long long moddiv(long long a, long long b) {
	return (a % mod * modInverse(b)) % mod;
}
void print(ll ans){
    cout<<ans<<endl;
}
class DSU{
    vector<ll>parent;
    vector<ll>ranks;
    public:
    void init(ll n){
        parent.assign(n+1,-1);
        ranks.assign(n+1,0);
    }
    ll find(ll x){
        if(parent[x]==-1){
            return x;
        }
        return find(parent[x]);
    }
    void uni(ll x,ll y){
        ll xpar=find(x);
        ll ypar=find(y);
        if(ranks[xpar]>ranks[ypar]){
            parent[ypar]=xpar;
        }
        else if(ranks[ypar]>ranks[xpar]){
            parent[xpar]=ypar;
        }
        else{
            parent[ypar]=xpar;
            ranks[xpar]++;
        }
    }
};

int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(NULL); 
  ll t;
  cin>>t;
  while(t--){
   
    }

}






